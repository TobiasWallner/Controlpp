// google test
#include <gtest/gtest.h>

#include <fstream>
#include <controlpp.hpp>

TEST(analysis, step_response_PT2){
    const auto s = controlpp::tf::s<double>;

    const double f = 100;
    const double w = 2 * 3.1415 * f;
    const double D = 0.5;
    const auto G = 1 / (1 + 2 * D * s / w + (s*s)/(w*w));

    const controlpp::TimeSeries timeseries = controlpp::step(G);

    // std::ofstream file("timeseries.csv");
    // file << timeseries << std::endl;
    // for(int i = 0; i < timeseries.times.size(); ++i){
    //     std::cout << timeseries.times(i) << ", ";
    // }
    // std::cout << std::endl;
    // for(int i = 0; i < timeseries.values.size(); ++i){
    //     std::cout << timeseries.values(i) << ", ";
    // }
    // std::cout << std::endl;

    const double expected_times[] = {0, 7.95798e-05, 0.00015916, 0.000238739, 0.000318319, 0.000397899, 0.000477479, 0.000557059, 0.000636639, 0.000716218, 0.000795798, 0.000875378, 0.000954958, 0.00103454, 0.00111412, 0.0011937, 0.00127328, 0.00135286, 0.00143244, 0.00151202, 0.0015916, 0.00167118, 0.00175076, 0.00183034, 0.00190992, 0.0019895, 0.00206908, 0.00214866, 0.00222823, 0.00230781, 0.00238739, 0.00246697, 0.00254655, 0.00262613, 0.00270571, 0.00278529, 0.00286487, 0.00294445, 0.00302403, 0.00310361, 0.00318319, 0.00326277, 0.00334235, 0.00342193, 0.00350151, 0.00358109, 0.00366067, 0.00374025, 0.00381983, 0.00389941, 0.00397899, 0.00405857, 0.00413815, 0.00421773, 0.00429731, 0.00437689, 0.00445647, 0.00453605, 0.00461563, 0.00469521, 0.00477479, 0.00485437, 0.00493395, 0.00501353, 0.00509311, 0.00517269, 0.00525227, 0.00533185, 0.00541143, 0.00549101, 0.00557059, 0.00565017, 0.00572975, 0.00580933, 0.00588891, 0.00596849, 0.00604807, 0.00612765, 0.00620723, 0.00628681, 0.00636639, 0.00644597, 0.00652555, 0.00660512, 0.0066847, 0.00676428, 0.00684386, 0.00692344, 0.00700302, 0.0070826, 0.00716218, 0.00724176, 0.00732134, 0.00740092, 0.0074805, 0.00756008, 0.00763966, 0.00771924, 0.00779882, 0.0078784, 0.00795798, 0.00803756, 0.00811714, 0.00819672, 0.0082763, 0.00835588, 0.00843546, 0.00851504, 0.00859462, 0.0086742, 0.00875378, 0.00883336, 0.00891294, 0.00899252, 0.0090721, 0.00915168, 0.00923126, 0.00931084, 0.00939042, 0.00947, 0.00954958, 0.00962916, 0.00970874, 0.00978832, 0.0098679, 0.00994748, 0.0100271, 0.0101066, 0.0101862, 0.0102658, 0.0103454, 0.010425, 0.0105045, 0.0105841, 0.0106637, 0.0107433, 0.0108229, 0.0109024, 0.010982, 0.0110616, 0.0111412, 0.0112208, 0.0113003, 0.0113799, 0.0114595, 0.0115391, 0.0116187, 0.0116982, 0.0117778, 0.0118574, 0.011937, 0.0120166, 0.0120961, 0.0121757, 0.0122553, 0.0123349, 0.0124145, 0.012494, 0.0125736, 0.0126532, 0.0127328, 0.0128124, 0.0128919, 0.0129715, 0.0130511, 0.0131307, 0.0132102, 0.0132898, 0.0133694, 0.013449, 0.0135286, 0.0136081, 0.0136877, 0.0137673, 0.0138469, 0.0139265, 0.014006, 0.0140856, 0.0141652, 0.0142448, 0.0143244, 0.0144039, 0.0144835, 0.0145631, 0.0146427, 0.0147223, 0.0148018, 0.0148814, 0.014961, 0.0150406, 0.0151202, 0.0151997, 0.0152793, 0.0153589, 0.0154385, 0.0155181, 0.0155976, 0.0156772, 0.0157568, 0.0158364, 0.015916, 0.0159955, 0.0160751, 0.0161547, 0.0162343, 0.0163139, 0.0163934, 0.016473, 0.0165526, 0.0166322, 0.0167118, 0.0167913, 0.0168709, 0.0169505, 0.0170301, 0.0171097, 0.0171892, 0.0172688, 0.0173484, 0.017428, 0.0175076, 0.0175871, 0.0176667, 0.0177463, 0.0178259, 0.0179055, 0.017985, 0.0180646, 0.0181442, 0.0182238, 0.0183034, 0.0183829, 0.0184625, 0.0185421, 0.0186217, 0.0187013, 0.0187808, 0.0188604, 0.01894, 0.0190196, 0.0190992, 0.0191787, 0.0192583, 0.0193379, 0.0194175, 0.0194971, 0.0195766, 0.0196562, 0.0197358, 0.0198154, 0.019895, 0.0199745, 0.0200541, 0.0201337, 0.0202133, 0.0202929, 0.0203724, 0.020452, 0.0205316, 0.0206112, 0.0206908, 0.0207703, 0.0208499, 0.0209295, 0.0210091, 0.0210887, 0.0211682, 0.0212478, 0.0213274, 0.021407, 0.0214866, 0.0215661, 0.0216457, 0.0217253, 0.0218049, 0.0218845, 0.021964, 0.0220436, 0.0221232, 0.0222028, 0.0222823, 0.0223619, 0.0224415, 0.0225211, 0.0226007, 0.0226802, 0.0227598, 0.0228394, 0.022919, 0.0229986, 0.0230781, 0.0231577, 0.0232373, 0.0233169, 0.0233965, 
0.023476, 0.0235556, 0.0236352, 0.0237148, 0.0237944, 0.0238739, 0.0239535, 0.0240331, 0.0241127, 0.0241923, 0.0242718, 0.0243514, 0.024431, 0.0245106, 
0.0245902, 0.0246697, 0.0247493, 0.0248289, 0.0249085, 0.0249881, 0.0250676, 0.0251472, 0.0252268, 0.0253064, 0.025386, 0.0254655, 0.0255451, 0.0256247, 0.0257043, 0.0257839, 0.0258634, 0.025943, 0.0260226, 0.0261022, 0.0261818, 0.0262613, 0.0263409, 0.0264205, 0.0265001, 0.0265797, 0.0266592, 0.0267388, 0.0268184, 0.026898, 0.0269776, 0.0270571, 0.0271367, 0.0272163, 0.0272959, 0.0273755, 0.027455, 0.0275346, 0.0276142, 0.0276938, 0.0277734, 0.0278529, 0.0279325, 0.0280121, 0.0280917, 0.0281713, 0.0282508, 0.0283304, 0.02841, 0.0284896, 0.0285692, 0.0286487, 0.0287283, 0.0288079, 0.0288875, 0.0289671, 0.0290466, 0.0291262, 0.0292058, 0.0292854, 0.029365, 0.0294445, 0.0295241, 0.0296037, 0.0296833, 0.0297629, 0.0298424, 0.029922, 0.0300016, 0.0300812, 0.0301608, 0.0302403, 0.0303199, 0.0303995, 0.0304791, 0.0305587, 0.0306382, 0.0307178, 0.0307974, 0.030877, 0.0309565, 0.0310361, 0.0311157, 0.0311953, 0.0312749, 0.0313544, 0.031434, 0.0315136, 0.0315932, 0.0316728, 0.0317523};
    const double expected_values[] = {0, 0.00122917, 0.00483342, 0.0106881, 0.0186692, 0.0286536, 0.0405192, 0.0541454, 0.069413, 0.0862048, 0.104405, 0.123902, 0.144584, 0.166342, 0.189072, 0.21267, 0.237037, 0.262076, 0.287692, 0.313796, 0.3403, 0.367119, 0.394174, 0.421386, 0.448681, 0.47599, 0.503244, 0.53038, 0.557338, 0.58406, 0.610493, 0.636586, 0.662293, 0.687569, 0.712374, 0.736671, 0.760425, 0.783604, 0.806181, 0.828129, 0.849426, 0.870051, 0.889987, 0.909219, 0.927734, 0.945522, 0.962576, 0.978889, 0.994459, 1.00928, 1.02336, 1.03669, 1.04929, 1.06115, 1.07228, 1.08269, 1.0924, 1.1014, 1.10972, 1.11737, 1.12435, 1.1307, 1.13641, 1.14152, 1.14603, 1.14996, 1.15334, 1.15617, 1.15849, 1.16031, 1.16165, 1.16253, 1.16297, 1.16299, 1.16262, 1.16186, 1.16075, 1.1593, 1.15753, 1.15547, 1.15312, 1.15052, 1.14768, 1.14461, 1.14135, 1.13789, 1.13427, 1.1305, 1.1266, 1.12257, 1.11845, 1.11423, 1.10995, 1.1056, 1.10121, 1.09678, 1.09234, 1.08789, 1.08344, 1.079, 1.07459, 1.07021, 1.06588, 1.06159, 1.05736, 1.0532, 1.04911, 1.04511, 1.04119, 1.03735, 1.03362, 1.02998, 1.02645, 1.02303, 1.01972, 1.01652, 1.01343, 1.01047, 1.00762, 1.00489, 1.00229, 0.999806, 0.997443, 0.995203, 0.993083, 0.991083, 0.989203, 0.987441, 0.985795, 0.984264, 0.982846, 0.98154, 0.980342, 0.97925, 0.978262, 0.977375, 0.976587, 0.975894, 0.975294, 0.974783, 0.974359, 0.974018, 0.973757, 0.973572, 0.973461, 0.97342, 0.973446, 0.973536, 0.973685, 0.973892, 0.974152, 0.974462, 0.97482, 0.975221, 0.975663, 0.976143, 0.976658, 0.977205, 0.97778, 0.978382, 0.979007, 0.979652, 0.980316, 0.980995, 0.981688, 0.982392, 0.983104, 0.983822, 0.984545, 0.985271, 0.985996, 0.986721, 0.987443, 0.98816, 0.988871, 0.989574, 
0.990269, 0.990953, 0.991626, 0.992287, 0.992934, 0.993567, 0.994185, 0.994787, 0.995372, 0.99594, 0.99649, 0.997022, 0.997535, 0.998029, 0.998504, 0.998959, 0.999395, 0.999811, 1.00021, 1.00058, 1.00094, 1.00128, 1.00159, 1.00189, 1.00217, 1.00243, 1.00267, 1.00289, 1.0031, 1.00329, 1.00346, 1.00361, 1.00375, 1.00387, 1.00398, 1.00407, 1.00414, 1.00421, 1.00426, 1.00429, 1.00432, 1.00433, 1.00433, 1.00432, 1.0043, 1.00428, 1.00424, 1.00419, 1.00414, 1.00408, 1.00401, 1.00393, 1.00385, 1.00377, 1.00367, 1.00358, 1.00348, 1.00338, 1.00327, 1.00316, 1.00305, 1.00293, 1.00282, 1.0027, 1.00258, 1.00247, 1.00235, 1.00223, 1.00211, 1.00199, 1.00188, 1.00176, 1.00165, 1.00154, 1.00143, 1.00132, 1.00121, 1.00111, 1.001, 1.0009, 1.00081, 1.00071, 1.00062, 1.00053, 1.00045, 1.00037, 1.00029, 1.00021, 1.00014, 1.00007, 1, 0.999938, 0.999879, 0.999822, 0.999768, 0.999718, 0.999671, 0.999627, 0.999586, 0.999548, 0.999513, 0.999481, 0.999451, 0.999425, 0.999401, 0.99938, 0.999361, 0.999345, 0.999331, 0.99932, 0.99931, 0.999303, 0.999298, 0.999295, 0.999294, 0.999294, 0.999296, 0.9993, 0.999305, 0.999312, 0.99932, 0.99933, 0.99934, 0.999352, 0.999365, 0.999378, 0.999393, 0.999408, 0.999424, 0.99944, 0.999457, 0.999475, 0.999493, 0.999511, 0.99953, 0.999549, 0.999568, 0.999587, 0.999606, 0.999626, 0.999645, 0.999664, 0.999683, 0.999702, 0.999721, 0.999739, 0.999758, 0.999776, 0.999793, 0.99981, 0.999827, 0.999844, 0.99986, 0.999875, 0.999891, 0.999905, 0.999919, 0.999933, 0.999946, 0.999959, 0.999971, 0.999983, 0.999994, 1, 1.00001, 1.00002, 1.00003, 1.00004, 1.00005, 1.00006, 1.00006, 1.00007, 1.00008, 1.00008, 1.00009, 1.00009, 1.0001, 1.0001, 1.0001, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00012, 1.00012, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001, 1.00009, 1.00009, 1.00009, 1.00008, 1.00008, 1.00008, 1.00008, 1.00007, 1.00007, 1.00007, 1.00006, 1.00006, 1.00006, 
1.00005, 1.00005, 1.00005, 1.00004, 1.00004, 1.00004, 1.00004, 1.00003, 1.00003, 1.00003};

    ASSERT_EQ(sizeof(expected_times)/sizeof(double), timeseries.times.size());
    ASSERT_EQ(sizeof(expected_values)/sizeof(double), timeseries.values.size());
    for(int i = 0; i < timeseries.times.size(); ++i){
        ASSERT_NEAR(expected_times[i], timeseries.times(i), 1e-3) << "at index: " << i;
    }
    for(int i = 0; i < timeseries.values.size(); ++i){
        ASSERT_NEAR(expected_values[i], timeseries.values(i), 1e-3) << "at index: " << i;
    }
}