// google test
#include <gtest/gtest.h>

#include <fstream>
#include <controlpp.hpp>

TEST(analysis, step_response_PT1){
    const auto s = controlpp::tf::s<double>;

    const auto G = 1 / (1 + s);

    const controlpp::TimeSeries timeseries = controlpp::step(G);

    // std::ofstream file("timeseries.csv");
    // file << timeseries << std::endl;
    // for(int i = 0; i < timeseries.times.size(); ++i){
    //     std::cout << timeseries.times(i) << ", ";
    // }
    // std::cout << std::endl;
    // for(int i = 0; i < timeseries.values.size(); ++i){
    //     std::cout << timeseries.values(i) << ", ";
    // }
    // std::cout << std::endl;

    const double expected_times[] = {0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.9, 1.95, 2, 2.05, 2.1, 2.15, 2.2, 2.25, 2.3, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6, 2.65, 2.7, 2.75, 2.8, 2.85, 2.9, 2.95, 3, 3.05, 3.1, 3.15, 3.2, 3.25, 3.3, 3.35, 3.4, 3.45, 3.5, 3.55, 3.6, 3.65, 3.7, 3.75, 3.8, 3.85, 3.9, 3.95, 4, 4.05, 4.1, 4.15, 4.2, 4.25, 4.3, 4.35, 4.4, 4.45, 4.5, 4.55, 4.6, 4.65, 4.7, 4.75, 4.8, 4.85, 4.9, 4.95, 5, 5.05, 5.1, 5.15, 5.2, 5.25, 5.3, 5.35, 5.4, 5.45, 
5.5, 5.55, 5.6, 5.65, 5.7, 5.75, 5.8, 5.85, 5.9, 5.95, 6, 6.05, 6.1, 6.15, 6.2, 6.25, 6.3, 6.35, 6.4, 6.45, 6.5, 6.55, 6.6, 6.65, 6.7, 6.75, 6.8, 6.85, 6.9, 6.95, 7, 7.05, 7.1, 7.15, 7.2, 7.25, 7.3, 7.35, 7.4, 7.45, 7.5, 7.55, 7.6, 7.65, 7.7, 7.75, 7.8, 7.85, 7.9, 7.95, 8, 8.05, 8.1, 8.15, 8.2, 8.25, 8.3, 8.35, 8.4, 8.45, 8.5, 8.55, 8.6, 8.65, 8.7, 8.75, 8.8, 8.85, 8.9, 8.95, 9, 9.05, 9.1, 9.15, 9.2, 9.25, 9.3, 9.35, 9.4, 9.45, 9.5, 9.55, 9.6, 9.65, 9.7, 9.75, 9.8, 9.85, 9.9, 9.95, 10, 10.05, 10.1, 10.15, 10.2, 10.25, 10.3, 10.35, 10.4, 10.45, 10.5, 10.55, 10.6, 10.65, 10.7, 10.75, 10.8, 10.85, 10.9, 10.95, 11, 11.05, 11.1, 11.15, 11.2, 11.25, 11.3, 11.35, 11.4, 11.45, 11.5, 11.55, 11.6, 11.65, 11.7, 11.75, 11.8, 11.85, 11.9, 11.95, 12, 12.05, 12.1, 12.15, 12.2, 12.25, 12.3, 12.35, 12.4, 12.45, 12.5, 12.55, 12.6, 12.65, 12.7, 12.75, 12.8, 12.85, 12.9, 12.95, 13, 13.05, 13.1, 13.15, 13.2, 13.25, 13.3, 13.35, 13.4, 13.45, 13.5, 13.55, 13.6, 13.65, 13.7, 13.75, 13.8, 13.85, 13.9, 13.95, 14, 14.05, 14.1, 14.15, 14.2, 14.25, 14.3, 14.35, 14.4, 14.45, 14.5, 14.55, 14.6, 14.65, 14.7, 14.75, 14.8, 14.85, 14.9, 14.95, 15, 15.05, 15.1, 15.15, 15.2, 15.25, 15.3, 15.35, 15.4, 15.45, 15.5, 15.55, 15.6, 15.65, 15.7, 15.75, 15.8, 15.85, 15.9, 15.95, 16, 16.05, 16.1, 16.15, 16.2, 16.25, 16.3, 16.35, 16.4, 16.45, 16.5, 16.55, 16.6, 16.65, 16.7, 16.75, 16.8, 16.85, 16.9, 16.95, 17, 17.05, 17.1, 17.15, 17.2, 17.25, 17.3, 17.35, 17.4, 17.45, 17.5, 17.55, 17.6, 17.65, 17.7, 17.75, 17.8, 17.85, 17.9, 17.95, 18, 18.05, 18.1, 18.15, 18.2, 18.25, 18.3, 18.35, 18.4, 18.45, 18.5, 18.55, 18.6, 18.65, 18.7, 18.75, 18.8, 18.85, 18.9, 18.95, 
19, 19.05, 19.1, 19.15, 19.2, 19.25, 19.3, 19.35, 19.4, 19.45, 19.5, 19.55, 19.6, 19.65, 19.7, 19.75, 19.8, 19.85, 19.9, 19.95};
    const double expected_values[] = {0, 0.0487706, 0.0951626, 0.139292, 0.181269, 0.221199, 0.259182, 0.295312, 0.32968, 0.362372, 0.393469, 0.42305, 0.451188, 0.477954, 0.503415, 0.527633, 0.550671, 0.572585, 0.59343, 0.613259, 0.632121, 0.650062, 0.667129, 0.683363, 0.698806, 0.713495, 0.727468, 0.74076, 0.753403, 0.76543, 0.77687, 0.787752, 0.798103, 0.80795, 0.817316, 0.826226, 0.834701, 0.842763, 0.850431, 0.857726, 0.864665, 0.871265, 0.877544, 0.883516, 0.889197, 0.894601, 0.899741, 0.904631, 0.909282, 0.913706, 0.917915, 0.921918, 0.925726, 0.929349, 0.932794, 0.936072, 0.93919, 0.942156, 0.944977, 0.94766, 0.950213, 0.952641, 0.954951, 0.957148, 0.959238, 0.961226, 0.963117, 0.964916, 0.966627, 0.968254, 0.969803, 0.971275, 0.972676, 0.974009, 0.975276, 0.976482, 0.977629, 0.97872, 0.979758, 0.980745, 0.981684, 0.982578, 0.983427, 0.984236, 0.985004, 0.985736, 0.986431, 0.987093, 0.987723, 0.988321, 0.988891, 0.989433, 0.989948, 0.990438, 0.990905, 0.991348, 0.99177, 0.992172, 0.992553, 0.992917, 0.993262, 0.993591, 0.993903, 0.994201, 0.994483, 0.994752, 0.995008, 0.995252, 0.995483, 0.995704, 0.995913, 0.996113, 0.996302, 0.996482, 0.996654, 0.996817, 0.996972, 0.99712, 0.997261, 0.997394, 0.997521, 0.997642, 0.997757, 0.997867, 0.997971, 0.99807, 0.998164, 0.998253, 0.998338, 0.998419, 0.998497, 0.99857, 0.99864, 0.998706, 0.998769, 0.998829, 0.998886, 0.998941, 0.998992, 0.999041, 0.999088, 0.999133, 0.999175, 0.999215, 0.999253, 0.99929, 0.999324, 0.999357, 0.999389, 0.999419, 0.999447, 0.999474, 0.9995, 0.999524, 0.999547, 0.999569, 0.99959, 0.99961, 0.999629, 0.999647, 0.999665, 0.999681, 0.999696, 0.999711, 0.999725, 0.999739, 0.999751, 0.999764, 0.999775, 0.999786, 0.999797, 0.999806, 0.999816, 0.999825, 0.999833, 0.999842, 0.999849, 0.999857, 0.999864, 0.99987, 0.999877, 0.999883, 0.999888, 0.999894, 0.999899, 0.999904, 0.999909, 0.999913, 0.999917, 0.999921, 0.999925, 0.999929, 0.999932, 0.999936, 0.999939, 0.999942, 
0.999945, 0.999947, 0.99995, 0.999952, 0.999955, 0.999957, 0.999959, 0.999961, 0.999963, 0.999965, 0.999966, 0.999968, 0.99997, 0.999971, 0.999972, 0.999974, 0.999975, 0.999976, 0.999977, 0.999979, 0.99998, 0.999981, 0.999982, 0.999982, 0.999983, 0.999984, 0.999985, 0.999986, 0.999986, 0.999987, 0.999988, 0.999988, 0.999989, 0.999989, 0.99999, 0.99999, 0.999991, 0.999991, 0.999992, 0.999992, 0.999992, 0.999993, 0.999993, 0.999994, 0.999994, 0.999994, 0.999994, 0.999995, 0.999995, 0.999995, 0.999995, 0.999996, 0.999996, 0.999996, 0.999996, 0.999996, 0.999997, 0.999997, 0.999997, 0.999997, 0.999997, 0.999997, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999998, 0.999999, 0.999999, 
0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 0.999999, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    
    ASSERT_EQ(sizeof(expected_times)/sizeof(double), timeseries.times.size());
    ASSERT_EQ(sizeof(expected_values)/sizeof(double), timeseries.values.size());
    for(int i = 0; i < timeseries.times.size(); ++i){
        ASSERT_NEAR(expected_times[i], timeseries.times(i), 1e-3) << "at index: " << i;
    }
    for(int i = 0; i < timeseries.values.size(); ++i){
        ASSERT_NEAR(expected_values[i], timeseries.values(i), 1e-3) << "at index: " << i;
    }
}

TEST(analysis, step_response_PT2){
    const auto s = controlpp::tf::s<double>;

    const double f = 100;
    const double w = 2 * 3.1415 * f;
    const double D = 0.5;
    const auto G = 1 / (1 + 2 * D * s / w + (s*s)/(w*w));

    const controlpp::TimeSeries timeseries = controlpp::step(G);

    // std::ofstream file("timeseries.csv");
    // file << timeseries << std::endl;
    // for(int i = 0; i < timeseries.times.size(); ++i){
    //     std::cout << timeseries.times(i) << ", ";
    // }
    // std::cout << std::endl;
    // for(int i = 0; i < timeseries.values.size(); ++i){
    //     std::cout << timeseries.values(i) << ", ";
    // }
    // std::cout << std::endl;

    const double expected_times[] = {0, 7.95798e-05, 0.00015916, 0.000238739, 0.000318319, 0.000397899, 0.000477479, 0.000557059, 0.000636639, 0.000716218, 0.000795798, 0.000875378, 0.000954958, 0.00103454, 0.00111412, 0.0011937, 0.00127328, 0.00135286, 0.00143244, 0.00151202, 0.0015916, 0.00167118, 0.00175076, 0.00183034, 0.00190992, 0.0019895, 0.00206908, 0.00214866, 0.00222823, 0.00230781, 0.00238739, 0.00246697, 0.00254655, 0.00262613, 0.00270571, 0.00278529, 0.00286487, 0.00294445, 0.00302403, 0.00310361, 0.00318319, 0.00326277, 0.00334235, 0.00342193, 0.00350151, 0.00358109, 0.00366067, 0.00374025, 0.00381983, 0.00389941, 0.00397899, 0.00405857, 0.00413815, 0.00421773, 0.00429731, 0.00437689, 0.00445647, 0.00453605, 0.00461563, 0.00469521, 0.00477479, 0.00485437, 0.00493395, 0.00501353, 0.00509311, 0.00517269, 0.00525227, 0.00533185, 0.00541143, 0.00549101, 0.00557059, 0.00565017, 0.00572975, 0.00580933, 0.00588891, 0.00596849, 0.00604807, 0.00612765, 0.00620723, 0.00628681, 0.00636639, 0.00644597, 0.00652555, 0.00660512, 0.0066847, 0.00676428, 0.00684386, 0.00692344, 0.00700302, 0.0070826, 0.00716218, 0.00724176, 0.00732134, 0.00740092, 0.0074805, 0.00756008, 0.00763966, 0.00771924, 0.00779882, 0.0078784, 0.00795798, 0.00803756, 0.00811714, 0.00819672, 0.0082763, 0.00835588, 0.00843546, 0.00851504, 0.00859462, 0.0086742, 0.00875378, 0.00883336, 0.00891294, 0.00899252, 0.0090721, 0.00915168, 0.00923126, 0.00931084, 0.00939042, 0.00947, 0.00954958, 0.00962916, 0.00970874, 0.00978832, 0.0098679, 0.00994748, 0.0100271, 0.0101066, 0.0101862, 0.0102658, 0.0103454, 0.010425, 0.0105045, 0.0105841, 0.0106637, 0.0107433, 0.0108229, 0.0109024, 0.010982, 0.0110616, 0.0111412, 0.0112208, 0.0113003, 0.0113799, 0.0114595, 0.0115391, 0.0116187, 0.0116982, 0.0117778, 0.0118574, 0.011937, 0.0120166, 0.0120961, 0.0121757, 0.0122553, 0.0123349, 0.0124145, 0.012494, 0.0125736, 0.0126532, 0.0127328, 0.0128124, 0.0128919, 0.0129715, 0.0130511, 0.0131307, 0.0132102, 0.0132898, 0.0133694, 0.013449, 0.0135286, 0.0136081, 0.0136877, 0.0137673, 0.0138469, 0.0139265, 0.014006, 0.0140856, 0.0141652, 0.0142448, 0.0143244, 0.0144039, 0.0144835, 0.0145631, 0.0146427, 0.0147223, 0.0148018, 0.0148814, 0.014961, 0.0150406, 0.0151202, 0.0151997, 0.0152793, 0.0153589, 0.0154385, 0.0155181, 0.0155976, 0.0156772, 0.0157568, 0.0158364, 0.015916, 0.0159955, 0.0160751, 0.0161547, 0.0162343, 0.0163139, 0.0163934, 0.016473, 0.0165526, 0.0166322, 0.0167118, 0.0167913, 0.0168709, 0.0169505, 0.0170301, 0.0171097, 0.0171892, 0.0172688, 0.0173484, 0.017428, 0.0175076, 0.0175871, 0.0176667, 0.0177463, 0.0178259, 0.0179055, 0.017985, 0.0180646, 0.0181442, 0.0182238, 0.0183034, 0.0183829, 0.0184625, 0.0185421, 0.0186217, 0.0187013, 0.0187808, 0.0188604, 0.01894, 0.0190196, 0.0190992, 0.0191787, 0.0192583, 0.0193379, 0.0194175, 0.0194971, 0.0195766, 0.0196562, 0.0197358, 0.0198154, 0.019895, 0.0199745, 0.0200541, 0.0201337, 0.0202133, 0.0202929, 0.0203724, 0.020452, 0.0205316, 0.0206112, 0.0206908, 0.0207703, 0.0208499, 0.0209295, 0.0210091, 0.0210887, 0.0211682, 0.0212478, 0.0213274, 0.021407, 0.0214866, 0.0215661, 0.0216457, 0.0217253, 0.0218049, 0.0218845, 0.021964, 0.0220436, 0.0221232, 0.0222028, 0.0222823, 0.0223619, 0.0224415, 0.0225211, 0.0226007, 0.0226802, 0.0227598, 0.0228394, 0.022919, 
0.0229986, 0.0230781, 0.0231577, 0.0232373, 0.0233169, 0.0233965, 0.023476, 0.0235556, 0.0236352, 0.0237148, 0.0237944, 0.0238739, 0.0239535, 0.0240331, 0.0241127, 0.0241923, 0.0242718, 0.0243514, 0.024431, 0.0245106, 0.0245902, 0.0246697, 0.0247493, 0.0248289, 0.0249085, 0.0249881, 0.0250676, 0.0251472, 0.0252268, 0.0253064, 0.025386, 0.0254655, 0.0255451, 0.0256247, 0.0257043, 0.0257839, 0.0258634, 0.025943, 0.0260226, 0.0261022, 0.0261818, 
0.0262613, 0.0263409, 0.0264205, 0.0265001, 0.0265797, 0.0266592, 0.0267388, 0.0268184, 0.026898, 0.0269776, 0.0270571, 0.0271367, 0.0272163, 0.0272959, 0.0273755, 0.027455, 0.0275346, 0.0276142, 0.0276938, 0.0277734, 0.0278529, 0.0279325, 0.0280121, 0.0280917, 0.0281713, 0.0282508, 0.0283304, 0.02841, 0.0284896, 0.0285692, 0.0286487, 0.0287283, 0.0288079, 0.0288875, 0.0289671, 0.0290466, 0.0291262, 0.0292058, 0.0292854, 0.029365, 0.0294445, 0.0295241, 0.0296037, 0.0296833, 0.0297629, 0.0298424, 0.029922, 0.0300016, 0.0300812, 0.0301608, 0.0302403, 0.0303199, 0.0303995, 0.0304791, 0.0305587, 0.0306382, 0.0307178, 0.0307974, 0.030877, 0.0309565, 0.0310361, 0.0311157, 0.0311953, 0.0312749, 0.0313544, 0.031434, 0.0315136, 0.0315932, 0.0316728, 0.0317523};
    const double expected_values[] = {0, 0.00122917, 0.00483342, 0.0106881, 0.0186692, 0.0286536, 0.0405192, 0.0541454, 0.069413, 0.0862048, 0.104405, 0.123902, 0.144584, 0.166342, 0.189072, 0.21267, 0.237037, 0.262076, 0.287692, 0.313796, 0.3403, 0.367119, 0.394174, 0.421386, 0.448681, 0.47599, 0.503244, 0.53038, 0.557338, 0.58406, 0.610493, 0.636586, 0.662293, 0.687569, 0.712374, 0.736671, 0.760425, 0.783604, 0.806181, 0.828129, 0.849426, 0.870051, 0.889987, 0.909219, 0.927734, 0.945522, 0.962576, 0.978889, 0.994459, 1.00928, 1.02336, 1.03669, 1.04929, 1.06115, 1.07228, 1.08269, 1.0924, 1.1014, 1.10972, 1.11737, 1.12435, 
1.1307, 1.13641, 1.14152, 1.14603, 1.14996, 1.15334, 1.15617, 1.15849, 1.16031, 1.16165, 1.16253, 1.16297, 1.16299, 1.16262, 1.16186, 1.16075, 1.1593, 1.15753, 1.15547, 1.15312, 1.15052, 1.14768, 1.14461, 1.14135, 1.13789, 1.13427, 1.1305, 1.1266, 1.12257, 1.11845, 1.11423, 1.10995, 1.1056, 1.10121, 1.09678, 1.09234, 1.08789, 1.08344, 1.079, 1.07459, 1.07021, 1.06588, 1.06159, 1.05736, 1.0532, 1.04911, 1.04511, 1.04119, 1.03735, 1.03362, 1.02998, 1.02645, 1.02303, 1.01972, 1.01652, 1.01343, 1.01047, 1.00762, 1.00489, 1.00229, 0.999806, 0.997443, 0.995203, 0.993083, 0.991083, 0.989203, 0.987441, 0.985795, 0.984264, 0.982846, 0.98154, 0.980342, 0.97925, 0.978262, 0.977375, 0.976587, 0.975894, 0.975294, 0.974783, 0.974359, 0.974018, 0.973757, 0.973572, 0.973461, 0.97342, 0.973446, 0.973536, 0.973685, 0.973892, 0.974152, 0.974462, 0.97482, 0.975221, 0.975663, 0.976143, 0.976658, 0.977205, 0.97778, 0.978382, 0.979007, 0.979652, 0.980316, 0.980995, 0.981688, 0.982392, 0.983104, 0.983822, 0.984545, 0.985271, 0.985996, 0.986721, 0.987443, 0.98816, 0.988871, 0.989574, 0.990269, 0.990953, 0.991626, 0.992287, 0.992934, 0.993567, 0.994185, 0.994787, 0.995372, 0.99594, 0.99649, 0.997022, 0.997535, 0.998029, 0.998504, 0.998959, 0.999395, 0.999811, 1.00021, 1.00058, 1.00094, 1.00128, 1.00159, 1.00189, 1.00217, 1.00243, 1.00267, 1.00289, 1.0031, 1.00329, 1.00346, 1.00361, 1.00375, 1.00387, 1.00398, 1.00407, 1.00414, 1.00421, 1.00426, 1.00429, 1.00432, 1.00433, 1.00433, 1.00432, 1.0043, 1.00428, 1.00424, 1.00419, 1.00414, 1.00408, 1.00401, 1.00393, 1.00385, 1.00377, 1.00367, 1.00358, 1.00348, 1.00338, 1.00327, 1.00316, 1.00305, 
1.00293, 1.00282, 1.0027, 1.00258, 1.00247, 1.00235, 1.00223, 1.00211, 1.00199, 1.00188, 1.00176, 1.00165, 1.00154, 1.00143, 1.00132, 1.00121, 1.00111, 1.001, 1.0009, 1.00081, 1.00071, 1.00062, 1.00053, 1.00045, 1.00037, 1.00029, 1.00021, 1.00014, 1.00007, 1, 0.999938, 0.999879, 0.999822, 0.999768, 0.999718, 0.999671, 0.999627, 0.999586, 0.999548, 0.999513, 0.999481, 0.999451, 0.999425, 0.999401, 0.99938, 0.999361, 0.999345, 0.999331, 0.99932, 0.99931, 0.999303, 0.999298, 0.999295, 0.999294, 0.999294, 0.999296, 0.9993, 0.999305, 0.999312, 0.99932, 0.99933, 0.99934, 0.999352, 0.999365, 0.999378, 0.999393, 0.999408, 0.999424, 0.99944, 0.999457, 0.999475, 0.999493, 0.999511, 0.99953, 0.999549, 0.999568, 0.999587, 0.999606, 0.999626, 0.999645, 0.999664, 0.999683, 0.999702, 0.999721, 0.999739, 0.999758, 0.999776, 0.999793, 0.99981, 0.999827, 0.999844, 0.99986, 0.999875, 0.999891, 0.999905, 0.999919, 0.999933, 0.999946, 0.999959, 0.999971, 0.999983, 0.999994, 1, 1.00001, 1.00002, 1.00003, 1.00004, 1.00005, 1.00006, 1.00006, 1.00007, 
1.00008, 1.00008, 1.00009, 1.00009, 1.0001, 1.0001, 1.0001, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00012, 1.00012, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.00011, 1.0001, 1.0001, 1.0001, 1.0001, 1.0001, 1.00009, 1.00009, 1.00009, 1.00008, 1.00008, 
1.00008, 1.00008, 1.00007, 1.00007, 1.00007, 1.00006, 1.00006, 1.00006, 1.00005, 1.00005, 1.00005, 1.00004, 1.00004, 1.00004, 1.00004, 1.00003, 1.00003, 1.00003};

    ASSERT_EQ(sizeof(expected_times)/sizeof(double), timeseries.times.size());
    ASSERT_EQ(sizeof(expected_values)/sizeof(double), timeseries.values.size());
    for(int i = 0; i < timeseries.times.size(); ++i){
        ASSERT_NEAR(expected_times[i], timeseries.times(i), 1e-3) << "at index: " << i;
    }
    for(int i = 0; i < timeseries.values.size(); ++i){
        ASSERT_NEAR(expected_values[i], timeseries.values(i), 1e-3) << "at index: " << i;
    }
}

TEST(analysis, step_response_LeadLag){
    ASSERT_TRUE(false); // TODO: test the lead-lag step response. Important to check if numerator terms work too.
}