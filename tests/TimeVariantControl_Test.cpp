// google test
#include <gtest/gtest.h>

// controlpp
#include <controlpp/TimeVariantControl.hpp>

TEST(TimeVariantControl, I){
    const double ki = 0.5;
    controlpp::timevar::IControl<double> filter(ki);

    const double expected[] = {0.000, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.010, 0.011, 0.012, 0.013, 0.014, 0.015, 0.016, 0.017, 0.018, 0.019, 0.020, 0.021, 0.022, 0.023, 0.024, 0.025, 0.026, 0.027, 0.028, 0.029, 0.030, 0.031, 0.032, 0.033, 0.034, 0.035, 0.036, 0.037, 0.038, 0.039, 0.040, 0.041, 0.042, 0.043, 0.044, 0.045, 0.046, 0.047, 0.048, 0.049, 0.050, 0.051, 0.052, 0.053, 0.054, 0.055, 0.056, 0.057, 0.058, 0.059, 0.060, 0.061, 0.062, 0.064, 0.065, 0.066, 0.067, 0.068, 0.069, 0.070, 0.071, 0.072, 0.073, 0.074, 0.075, 0.076, 0.077, 0.078, 0.079, 0.080, 0.081, 0.082, 0.083, 0.084, 0.085, 0.086, 0.087, 0.088, 0.089, 0.090, 0.091, 0.092, 0.093, 0.094, 0.095, 0.096, 0.097, 0.098, 0.099, 0.100, 0.101, 0.102, 0.103, 0.104, 0.105, 0.106, 0.107, 0.108, 0.109, 0.110, 0.111, 0.112, 0.113, 0.114, 0.115, 0.116, 0.117, 0.118, 0.119, 0.120, 0.121, 0.122, 0.123, 0.124, 0.125, 0.126, 0.127, 0.128, 0.129, 0.130, 0.131, 0.132, 0.133, 0.134, 0.135, 0.136, 0.137, 0.138, 0.139, 0.140, 0.141, 0.142, 0.143, 0.144, 0.145, 0.146, 0.147, 0.148, 0.149, 0.150, 0.151, 0.152, 0.153, 0.154, 0.155, 0.156, 0.157, 0.158, 0.159, 0.160, 0.161, 0.162, 0.163, 0.164, 0.165, 0.166, 0.167, 0.168, 0.169, 0.170, 0.171, 0.172, 0.173, 0.174, 0.175, 0.176, 0.177, 0.178, 0.179, 0.180, 0.181, 0.182, 0.183, 0.184, 0.185, 0.186, 0.187, 0.188, 0.189, 0.190, 0.191, 0.192, 0.193, 0.194, 0.195, 0.196, 0.197, 0.198, 0.199, 0.200, 0.201, 0.202, 0.203, 0.204, 0.205, 0.206, 0.207, 0.208, 0.209, 0.210, 0.211, 0.212, 0.213, 0.214, 0.215, 0.216, 0.217, 0.218, 0.219, 0.220, 0.221, 0.222, 0.223, 0.224, 0.225, 0.226, 0.227, 0.228, 0.229, 0.230, 0.231, 0.232, 0.233, 0.234, 0.235, 0.236, 0.237, 0.238, 0.239, 0.240, 0.241, 0.242, 0.243, 0.244, 0.245, 0.246, 0.247, 0.248, 0.249, 0.250, 0.251, 0.252, 0.253, 0.254, 0.255, 0.256, 0.257, 0.258, 0.259, 0.260, 0.261, 0.262, 0.263, 0.264, 0.265, 0.266, 0.267, 0.268, 0.269, 0.270, 0.271, 0.272, 0.273, 0.274, 0.275, 0.276, 0.277, 0.278, 0.279, 0.280, 0.281, 0.282, 0.283, 0.284, 0.285, 0.286, 0.287, 0.288, 0.289, 0.290, 0.291, 0.292, 0.293, 0.294, 0.295, 0.296, 0.297, 0.298, 0.299, 0.300, 0.301, 0.302, 0.303, 0.304, 0.305, 0.306, 0.307, 0.308, 0.309, 0.310, 0.311, 0.312, 0.313, 0.314, 0.315, 0.316, 0.317, 0.318, 0.319, 0.320, 0.321, 0.322, 0.323, 0.324, 0.325, 0.326, 0.327, 0.328, 0.329, 0.330, 0.331, 0.332, 0.333, 0.334, 0.335, 0.336, 0.337, 0.338, 0.339, 0.340, 0.341, 0.342, 0.343, 0.344, 0.345, 0.346, 0.347, 0.348, 0.349, 0.350, 0.351, 0.352, 0.353, 0.354, 0.355, 0.356, 0.357, 0.358, 0.359, 0.360, 0.361, 0.362, 0.363, 0.364, 0.365, 0.366, 0.367, 0.368, 0.369, 0.370, 0.371, 0.372, 0.373, 0.374, 0.375, 0.376, 0.377, 0.378, 0.379, 0.380, 0.381, 0.382, 0.383, 0.384, 0.385, 0.386, 0.387, 0.388, 0.389, 0.390, 0.391, 0.392, 0.393, 0.394, 0.395, 0.396, 0.397, 0.398, 0.399, 0.400, 0.401, 0.402, 0.403, 0.404, 0.405, 0.406, 0.407, 0.408, 0.409, 0.410, 0.411, 0.412, 0.413, 0.414, 0.415, 0.416, 0.417, 0.418, 0.419, 0.420, 0.421, 0.422, 0.423, 0.424, 0.425, 0.426, 0.427, 0.428, 0.429, 0.430, 0.431, 0.432, 0.433, 0.434, 0.435, 0.436, 0.437, 0.438, 0.439, 0.440, 0.441, 0.442, 0.443, 0.444, 0.445, 0.446, 0.447, 0.448, 0.449, 0.450, 0.451, 0.452, 0.453, 0.454, 0.455, 0.456, 0.457, 0.458, 0.459, 0.460, 0.461, 0.462, 0.463, 0.464, 0.465, 0.466, 0.467, 0.468, 0.469, 0.470, 0.471, 0.472, 0.473, 0.474, 0.475, 0.476, 0.477, 0.478, 0.479, 0.480, 0.481, 0.482, 0.483, 0.484, 0.485, 0.486, 0.487, 0.488, 0.489, 0.490, 0.491, 0.492, 0.493, 0.494, 0.495, 0.496, 0.497, 0.498, 0.499, 0.500, 0.501};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        ASSERT_NEAR(y, expected[i], 1e-3);
    }

    filter.reset();
}

TEST(TimeVariantControl, D){
    const double kd = 6;
    const double omega = 10 * 2 * 3.1415;
    controlpp::timevar::DControl<double> filter(kd, omega);

    const double expected[] = {354.695, 312.758, 275.781, 243.175, 214.424, 189.072, 166.718, 147.006, 129.626, 114.300, 100.786, 88.870, 78.363, 69.098, 60.928, 53.725, 47.373, 41.772, 36.833, 32.478, 28.638, 25.252, 22.267, 19.634, 17.313, 15.266, 13.461, 11.869, 10.466, 9.229, 8.138, 7.175, 6.327, 5.579, 4.919, 4.338, 3.825, 3.373, 2.974, 2.622, 2.312, 2.039, 1.798, 1.585, 1.398, 1.233, 1.087, 0.958, 0.845, 0.745, 0.657, 0.579, 0.511, 0.450, 0.397, 0.350, 0.309, 0.272, 0.240, 0.212, 0.187, 0.165, 0.145, 0.128, 0.113, 0.100, 0.088, 0.077, 0.068, 0.060, 0.053, 0.047, 0.041, 0.036, 0.032, 0.028, 0.025, 0.022, 0.019, 0.017, 0.015, 0.013, 0.012, 0.010, 0.009, 0.008, 0.007, 0.006, 0.006, 0.005, 0.004, 0.004, 0.003, 0.003, 0.003, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        ASSERT_NEAR(y, expected[i], 1e-3);
    }

    filter.reset();
}

TEST(TimeVariantControl, PT1){
    const double k = 2.3;
    const double omega = 5 * 2 * 3.1415;
    controlpp::timevar::PT1Control<double> filter(k, omega);

    const double expected[] = {0.070, 0.206, 0.333, 0.453, 0.566, 0.671, 0.771, 0.864, 0.951, 1.033, 1.111, 1.183, 1.251, 1.315, 1.375, 1.431, 1.484, 1.534, 1.581, 1.624, 1.666, 1.704, 1.741, 1.775, 1.807, 1.837, 1.865, 1.891, 1.916, 1.940, 1.962, 1.982, 2.002, 2.020, 2.037, 2.053, 2.068, 2.082, 2.095, 2.108, 2.120, 2.130, 2.141, 2.151, 2.160, 2.168, 2.176, 2.184, 2.191, 2.197, 2.204, 2.210, 2.215, 2.220, 2.225, 2.230, 2.234, 2.238, 2.242, 2.245, 2.249, 2.252, 2.255, 2.257, 2.260, 2.262, 2.265, 2.267, 2.269, 2.271, 2.273, 2.274, 2.276, 2.277, 2.279, 2.280, 2.281, 2.282, 2.283, 2.284, 2.285, 2.286, 2.287, 2.288, 2.289, 2.289, 2.290, 2.291, 2.291, 2.292, 2.292, 2.293, 2.293, 2.294, 2.294, 2.294, 2.295, 2.295, 2.295, 2.296, 2.296, 2.296, 2.296, 2.297, 2.297, 2.297, 2.297, 2.297, 2.297, 2.298, 2.298, 2.298, 2.298, 2.298, 2.298, 2.298, 2.298, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        //std::cout << std::format("{:4.3f}, {:4.3f}", time, y) << std::endl;
        ASSERT_NEAR(y, expected[i], 1e-3);
    }

    filter.reset();
}


TEST(TimeVariantControl, PT2){
    const double K = 2.3;
    const double D = 0.3;
    const double omega = 4 * 2 * 3.1415;
    controlpp::timevar::PT2Control<double> filter(K, D, omega);

    const double expected[] = {0.001, 0.007, 0.018, 0.035, 0.057, 0.083, 0.115, 0.150, 0.191, 0.235, 0.283, 0.334, 0.389, 0.447, 0.508, 0.572, 0.638, 0.706, 0.776, 0.848, 0.922, 0.996, 1.072, 1.148, 1.225, 1.303, 1.380, 1.458, 1.535, 1.612, 1.688, 1.764, 1.839, 1.912, 1.985, 2.056, 2.126, 2.193, 2.260, 2.324, 2.386, 2.447, 2.505, 2.561, 2.614, 2.665, 2.714, 2.761, 2.804, 2.846, 2.884, 2.920, 2.954, 2.984, 3.013, 3.038, 3.061, 3.082, 3.100, 3.115, 3.128, 3.138, 3.146, 3.152, 3.155, 3.156, 3.155, 3.152, 3.147, 3.140, 3.131, 3.120, 3.108, 3.094, 3.078, 3.061, 3.042, 3.023, 3.002, 2.979, 2.956, 2.932, 2.907, 2.881, 2.855, 2.828, 2.800, 2.772, 2.744, 2.716, 2.687, 2.658, 2.629, 2.600, 2.571, 2.543, 2.514, 2.486, 2.459, 2.432, 2.405, 2.379, 2.353, 2.328, 2.304, 2.280, 2.257, 2.235, 2.214, 2.193, 2.174, 2.155, 2.137, 2.121, 2.105, 2.090, 2.076, 2.063, 2.051, 2.040, 2.030, 2.021, 2.013, 2.006, 1.999, 1.994, 1.990, 1.986, 1.984, 1.982, 1.981, 1.981, 1.982, 1.983, 1.986, 1.989, 1.992, 1.997, 2.001, 2.007, 2.013, 2.020, 2.027, 2.034, 2.043, 2.051, 2.060, 2.069, 2.078, 2.088, 2.098, 2.108, 2.119, 2.129, 2.140, 2.150, 2.161, 2.172, 2.183, 2.193, 2.204, 2.215, 2.225, 2.235, 2.246, 2.256, 2.266, 2.275, 2.285, 2.294, 2.303, 2.311, 2.320, 2.328, 2.336, 2.343, 2.350, 2.357, 2.364, 2.370, 2.375, 2.381, 2.386, 2.390, 2.395, 2.399, 2.402, 2.405, 2.408, 2.411, 2.413, 2.415, 2.416, 2.417, 2.418, 2.419, 2.419, 2.419, 2.418, 2.418, 2.417, 2.415, 2.414, 2.412, 2.410, 2.408, 2.406, 2.403, 2.400, 2.398, 2.394, 2.391, 2.388, 2.384, 2.381, 2.377, 2.373, 2.370, 2.366, 2.362, 2.358, 2.354, 2.350, 2.346, 2.342, 2.338, 2.334, 2.330, 2.326, 2.322, 2.318, 2.315, 2.311, 2.308, 2.304, 2.301, 2.297, 2.294, 2.291, 2.288, 2.285, 2.283, 2.280, 2.278, 2.275, 2.273, 2.271, 2.269, 2.267, 2.266, 2.264, 2.263, 2.261, 2.260, 2.259, 2.258, 2.258, 2.257, 2.256, 2.256, 2.256, 2.256, 2.256, 2.256, 2.256, 2.256, 2.257, 2.257, 2.258, 2.259, 2.259, 2.260, 2.261, 2.262, 2.263, 2.264, 2.265, 2.267, 2.268, 2.269, 2.271, 2.272, 2.273, 2.275, 2.276, 2.278, 2.279, 2.281, 2.282, 2.284, 2.285, 2.287, 2.288, 2.290, 2.291, 2.292, 2.294, 2.295, 2.296, 2.298, 2.299, 2.300, 2.302, 2.303, 2.304, 2.305, 2.306, 2.307, 2.308, 2.309, 2.310, 2.310, 2.311, 2.312, 2.313, 2.313, 2.314, 2.314, 2.315, 2.315, 2.315, 2.316, 2.316, 2.316, 2.316, 2.316, 2.316, 2.316, 2.316, 2.316, 2.316, 2.316, 2.316, 2.316, 2.316, 2.315, 2.315, 2.315, 2.314, 2.314, 2.314, 2.313, 2.313, 2.312, 2.312, 2.311, 2.311, 2.310, 2.310, 2.309, 2.309, 2.308, 2.308, 2.307, 2.306, 2.306, 2.305, 2.305, 2.304, 2.304, 2.303, 2.303, 2.302, 2.302, 2.301, 2.301, 2.300, 2.300, 2.299, 2.299, 2.298, 2.298, 2.298, 2.297, 2.297, 2.297, 2.296, 2.296, 2.296, 2.295, 2.295, 2.295, 2.295, 2.295, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.294, 2.295, 2.295, 2.295, 2.295, 2.295, 2.295, 2.296, 2.296, 2.296, 2.296, 2.296, 2.296, 2.297, 2.297, 2.297, 2.297, 2.298, 2.298, 2.298, 2.298, 2.298, 2.299, 2.299, 2.299, 2.299, 2.299, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.302, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.301, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        //std::cout << std::format("{:4.3f}, {:4.3f}", time, y) << std::endl;
        ASSERT_NEAR(y, expected[i], 1e-3);
    }

    filter.reset();
}

TEST(TimeVariantControl, PI){
    const double kp = 1.7;
    const double ki = 3.1;
    controlpp::timevar::PIControl<double> filter(kp, ki);

    const double expected[] = {1.703, 1.709, 1.716, 1.722, 1.728, 1.734, 1.740, 1.746, 1.753, 1.759, 1.765, 1.771, 1.777, 1.784, 1.790, 1.796, 1.802, 1.808, 1.815, 1.821, 1.827, 1.833, 1.839, 1.846, 1.852, 1.858, 1.864, 1.870, 1.877, 1.883, 1.889, 1.895, 1.901, 1.908, 1.914, 1.920, 1.926, 1.932, 1.939, 1.945, 1.951, 1.957, 1.963, 1.970, 1.976, 1.982, 1.988, 1.994, 2.001, 2.007, 2.013, 2.019, 2.025, 2.032, 2.038, 2.044, 2.050, 2.056, 2.063, 2.069, 2.075, 2.081, 2.087, 2.094, 2.100, 2.106, 2.112, 2.118, 2.125, 2.131, 2.137, 2.143, 2.149, 2.156, 2.162, 2.168, 2.174, 2.180, 2.187, 2.193, 2.199, 2.205, 2.211, 2.218, 2.224, 2.230, 2.236, 2.242, 2.249, 2.255, 2.261, 2.267, 2.273, 2.280, 2.286, 2.292, 2.298, 2.304, 2.311, 2.317, 2.323, 2.329, 2.335, 2.342, 2.348, 2.354, 2.360, 2.366, 2.373, 2.379, 2.385, 2.391, 2.397, 2.404, 2.410, 2.416, 2.422, 2.428, 2.435, 2.441, 2.447, 2.453, 2.459, 2.466, 2.472, 2.478, 2.484, 2.490, 2.497, 2.503, 2.509, 2.515, 2.521, 2.528, 2.534, 2.540, 2.546, 2.552, 2.559, 2.565, 2.571, 2.577, 2.583, 2.590, 2.596, 2.602, 2.608, 2.614, 2.621, 2.627, 2.633, 2.639, 2.645, 2.652, 2.658, 2.664, 2.670, 2.676, 2.683, 2.689, 2.695, 2.701, 2.707, 2.714, 2.720, 2.726, 2.732, 2.738, 2.745, 2.751, 2.757, 2.763, 2.769, 2.776, 2.782, 2.788, 2.794, 2.800, 2.807, 2.813, 2.819, 2.825, 2.831, 2.838, 2.844, 2.850, 2.856, 2.862, 2.869, 2.875, 2.881, 2.887, 2.893, 2.900, 2.906, 2.912, 2.918, 2.924, 2.931, 2.937, 2.943, 2.949, 2.955, 2.962, 2.968, 2.974, 2.980, 2.986, 2.993, 2.999, 3.005, 3.011, 3.017, 3.024, 3.030, 3.036, 3.042, 3.048, 3.055, 3.061, 3.067, 3.073, 3.079, 3.086, 3.092, 3.098, 3.104, 3.110, 3.117, 3.123, 3.129, 3.135, 3.141, 3.148, 3.154, 3.160, 3.166, 3.172, 3.179, 3.185, 3.191, 3.197, 3.203, 3.210, 3.216, 3.222, 3.228, 3.234, 3.241, 3.247, 3.253, 3.259, 3.265, 3.272, 3.278, 3.284, 3.290, 3.296, 3.303, 3.309, 3.315, 3.321, 3.327, 3.334, 3.340, 3.346, 3.352, 3.358, 3.365, 3.371, 3.377, 3.383, 3.389, 3.396, 3.402, 3.408, 3.414, 3.420, 3.427, 3.433, 3.439, 3.445, 3.451, 3.458, 3.464, 3.470, 3.476, 3.482, 3.489, 3.495, 3.501, 3.507, 3.513, 3.520, 3.526, 3.532, 3.538, 3.544, 3.551, 3.557, 3.563, 3.569, 3.575, 3.582, 3.588, 3.594, 3.600, 3.606, 3.613, 3.619, 3.625, 3.631, 3.637, 3.644, 3.650, 3.656, 3.662, 3.668, 3.675, 3.681, 3.687, 3.693, 3.699, 3.706, 3.712, 3.718, 3.724, 3.730, 3.737, 3.743, 3.749, 3.755, 3.761, 3.768, 3.774, 3.780, 3.786, 3.792, 3.799, 3.805, 3.811, 3.817, 3.823, 3.830, 3.836, 3.842, 3.848, 3.854, 3.861, 3.867, 3.873, 3.879, 3.885, 3.892, 3.898, 3.904, 3.910, 3.916, 3.923, 3.929, 3.935, 3.941, 3.947, 3.954, 3.960, 3.966, 3.972, 3.978, 3.985, 3.991, 3.997, 4.003, 4.009, 4.016, 4.022, 4.028, 4.034, 4.040, 4.047, 4.053, 4.059, 4.065, 4.071, 4.078, 4.084, 4.090, 4.096, 4.102, 4.109, 4.115, 4.121, 4.127, 4.133, 4.140, 4.146, 4.152, 4.158, 4.164, 4.171, 4.177, 4.183, 4.189, 4.195, 4.202, 4.208, 4.214, 4.220, 4.226, 4.233, 4.239, 4.245, 4.251, 4.257, 4.264, 4.270, 4.276, 4.282, 4.288, 4.295, 4.301, 4.307, 4.313, 4.319, 4.326, 4.332, 4.338, 4.344, 4.350, 4.357, 4.363, 4.369, 4.375, 4.381, 4.388, 4.394, 4.400, 4.406, 4.412, 4.419, 4.425, 4.431, 4.437, 4.443, 4.450, 4.456, 4.462, 4.468, 4.474, 4.481, 4.487, 4.493, 4.499, 4.505, 4.512, 4.518, 4.524, 4.530, 4.536, 4.543, 4.549, 4.555, 4.561, 4.567, 4.574, 4.580, 4.586, 4.592, 4.598, 4.605, 4.611, 4.617, 4.623, 4.629, 4.636, 4.642, 4.648, 4.654, 4.660, 4.667, 4.673, 4.679, 4.685, 4.691, 4.698, 4.704, 4.710, 4.716, 4.722, 4.729, 4.735, 4.741, 4.747, 4.753, 4.760, 4.766, 4.772, 4.778, 4.784, 4.791, 4.797, 4.803};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        ASSERT_NEAR(y, expected[i], 1e-3);
    }

    filter.reset();
}

TEST(TimeVariantControl, PT1I){
    const double kp = 1.7;
    const double ki = 3.1;
    const double omega = 30 * 2 * 3.1415;
    controlpp::timevar::PT1IControl<double> filter(kp, ki, omega);

    const double expected[] = {0.273, 0.733, 1.049, 1.266, 1.417, 1.522, 1.595, 1.648, 1.685, 1.713, 1.734, 1.750, 1.763, 1.774, 1.783, 1.791, 1.799, 1.806, 1.813, 1.820, 1.826, 1.833, 1.839, 1.845, 1.852, 1.858, 1.864, 1.870, 1.877, 1.883, 1.889, 1.895, 1.901, 1.908, 1.914, 1.920, 1.926, 1.932, 1.939, 1.945, 1.951, 1.957, 1.963, 1.970, 1.976, 1.982, 1.988, 1.994, 2.001, 2.007, 2.013, 2.019, 2.025, 2.032, 2.038, 2.044, 2.050, 2.056, 2.063, 2.069, 2.075, 2.081, 2.087, 2.094, 2.100, 2.106, 2.112, 2.118, 2.125, 2.131, 2.137, 2.143, 2.149, 2.156, 2.162, 2.168, 2.174, 2.180, 2.187, 2.193, 2.199, 2.205, 2.211, 2.218, 2.224, 2.230, 2.236, 2.243, 2.249, 2.255, 2.261, 2.267, 2.274, 2.280, 2.286, 2.292, 2.298, 2.304, 2.311, 2.317, 2.323, 2.329, 2.335, 2.342, 2.348, 2.354, 2.360, 2.367, 2.373, 2.379, 2.385, 2.391, 2.398, 2.404, 2.410, 2.416, 2.422, 2.429, 2.435, 2.441, 2.447, 2.453, 2.460, 2.466, 2.472, 2.478, 2.484, 2.491, 2.497, 2.503, 2.509, 2.515, 2.522, 2.528, 2.534, 2.540, 2.546, 2.553, 2.559, 2.565, 2.571, 2.577, 2.584, 2.590, 2.596, 2.602, 2.608, 2.615, 2.621, 2.627, 2.633, 2.639, 2.646, 2.652, 2.658, 2.664, 2.670, 2.677, 2.683, 2.689, 2.695, 2.701, 2.708, 2.714, 2.720, 2.726, 2.732, 2.739, 2.745, 2.751, 2.757, 2.763, 2.770, 2.776, 2.782, 2.788, 2.794, 2.801, 2.807, 2.813, 2.819, 2.825, 2.832, 2.838, 2.844, 2.850, 2.856, 2.862, 2.869, 2.875, 2.881, 2.887, 2.894, 2.900, 2.906, 2.912, 2.918, 2.924, 2.931, 2.937, 2.943, 2.949, 2.956, 2.962, 2.968, 2.974, 2.980, 2.987, 2.993, 2.999, 3.005, 3.011, 3.018, 3.024, 3.030, 3.036, 3.042, 3.049, 3.055, 3.061, 3.067, 3.073, 3.080, 3.086, 3.092, 3.098, 3.104, 3.111, 3.117, 3.123, 3.129, 3.135, 3.142, 3.148, 3.154, 3.160, 3.166, 3.173, 3.179, 3.185, 3.191, 3.197, 3.204, 3.210, 3.216, 3.222, 3.228, 3.235, 3.241, 3.247, 3.253, 3.259, 3.265, 3.272, 3.278, 3.284, 3.290, 3.297, 3.303, 3.309, 3.315, 3.321, 3.328, 3.334, 3.340, 3.346, 3.352, 3.359, 3.365, 3.371, 3.377, 3.383, 3.390, 3.396, 3.402, 3.408, 3.414, 3.421, 3.427, 3.433, 3.439, 3.445, 3.452, 3.458, 3.464, 3.470, 3.476, 3.483, 3.489, 3.495, 3.501, 3.507, 3.514, 3.520, 3.526, 3.532, 3.538, 3.545, 3.551, 3.557, 3.563, 3.569, 3.576, 3.582, 3.588, 3.594, 3.600, 3.607, 3.613, 3.619, 3.625, 3.631, 3.638, 3.644, 3.650, 3.656, 3.662, 3.669, 3.675, 3.681, 3.687, 3.693, 3.700, 3.706, 3.712, 3.718, 3.724, 3.731, 3.737, 3.743, 3.749, 3.755, 3.762, 3.768, 3.774, 3.780, 3.786, 3.793, 3.799, 3.805, 3.811, 3.817, 3.824, 3.830, 3.836, 3.842, 3.848, 3.855, 3.861, 3.867, 3.873, 3.879, 3.886, 3.892, 3.898, 3.904, 3.910, 3.917, 3.923, 3.929, 3.935, 3.941, 3.948, 3.954, 3.960, 3.966, 3.972, 3.979, 3.985, 3.991, 3.997, 4.003, 4.010, 4.016, 4.022, 4.028, 4.034, 4.041, 4.047, 4.053, 4.059, 4.065, 4.072, 4.078, 4.084, 4.090, 4.096, 4.103, 4.109, 4.115, 4.121, 4.127, 4.134, 4.140, 4.146, 4.152, 4.158, 4.165, 4.171, 4.177, 4.183, 4.189, 4.196, 4.202, 4.208, 4.214, 4.220, 4.227, 4.233, 4.239, 4.245, 4.251, 4.258, 4.264, 4.270, 4.276, 4.282, 4.289, 4.295, 4.301, 4.307, 4.313, 4.320, 4.326, 4.332, 4.338, 4.344, 4.351, 4.357, 4.363, 4.369, 4.375, 4.382, 4.388, 4.394, 4.400, 4.406, 4.413, 4.419, 4.425, 4.431, 4.437, 4.444, 4.450, 4.456, 4.462, 4.468, 4.475, 4.481, 4.487, 4.493, 4.499, 4.506, 4.512, 4.518, 4.524, 4.530, 4.537, 4.543, 4.549, 4.555, 4.561, 4.568, 4.574, 4.580, 4.586, 4.592, 4.599, 4.605, 4.611, 4.617, 4.623, 4.630, 4.636, 4.642, 4.648, 4.654, 4.661, 4.667, 4.673, 4.679, 4.685, 4.692, 4.698, 4.704, 4.710, 4.716, 4.723, 4.729, 4.735, 4.741, 4.747, 4.754, 4.760, 4.766, 4.772, 4.778, 4.785, 4.791, 4.797, 4.803};


    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        ASSERT_NEAR(y, expected[i], 1e-3);
    }

    filter.reset();
}

TEST(TimeVariantControl, PID){
    const double kp = 1;
    const double ki = 10;
    const double kd = 1;
    const double omega = 1 * 2 * 3.1415;
    controlpp::timevar::PIDControl<double> filter(kp, ki, kd, omega);

    const double expected[] = {7.254, 7.196, 7.139, 7.083, 7.028, 6.974, 6.920, 6.868, 6.817, 6.766, 6.716, 6.668, 6.620, 6.573, 6.527, 6.481, 6.437, 6.393, 6.350, 6.308, 6.266, 6.226, 6.186, 6.147, 6.108, 6.070, 6.034, 5.997, 5.962, 5.927, 5.893, 5.859, 5.826, 5.794, 5.763, 5.732, 5.702, 5.672, 5.643, 5.615, 5.587, 5.560, 5.533, 5.507, 5.482, 5.457, 5.433, 5.409, 5.386, 5.363, 5.341, 5.319, 5.298, 5.278, 5.258, 5.238, 5.219, 5.201, 5.182, 5.165, 5.148, 5.131, 5.115, 5.099, 5.084, 5.069, 5.054, 5.040, 5.027, 5.014, 5.001, 4.988, 4.976, 4.965, 4.954, 4.943, 4.933, 4.923, 4.913, 4.904, 4.895, 4.886, 4.878, 4.870, 4.863, 4.856, 4.849, 4.842, 4.836, 4.831, 4.825, 4.820, 4.815, 4.810, 4.806, 4.802, 4.799, 4.795, 4.792, 4.790, 4.787, 4.785, 4.783, 4.781, 4.780, 4.779, 4.778, 4.777, 4.777, 4.777, 4.777, 4.778, 4.778, 4.779, 4.780, 4.782, 4.783, 4.785, 4.787, 4.790, 4.792, 4.795, 4.798, 4.801, 4.804, 4.808, 4.812, 4.816, 4.820, 4.824, 4.829, 4.834, 4.839, 4.844, 4.849, 4.855, 4.860, 4.866, 4.872, 4.879, 4.885, 4.892, 4.898, 4.905, 4.912, 4.920, 4.927, 4.934, 4.942, 4.950, 4.958, 4.966, 4.975, 4.983, 4.992, 5.000, 5.009, 5.018, 5.027, 5.037, 5.046, 5.056, 5.065, 5.075, 5.085, 5.095, 5.105, 5.116, 5.126, 5.137, 5.147, 5.158, 5.169, 5.180, 5.191, 5.202, 5.214, 5.225, 5.237, 5.249, 5.260, 5.272, 5.284, 5.296, 5.308, 5.321, 5.333, 5.346, 5.358, 5.371, 5.384, 5.396, 5.409, 5.422, 5.435, 5.449, 5.462, 5.475, 5.489, 5.502, 5.516, 5.529, 5.543, 5.557, 5.571, 5.585, 5.599, 5.613, 5.627, 5.642, 5.656, 5.670, 5.685, 5.700, 5.714, 5.729, 5.744, 5.758, 5.773, 5.788, 5.803, 5.818, 5.834, 5.849, 5.864, 5.879, 5.895, 5.910, 5.926, 5.941, 5.957, 5.973, 5.988, 6.004, 6.020, 6.036, 6.052, 6.068, 6.084, 6.100, 6.116, 6.132, 6.148, 6.165, 6.181, 6.197, 6.214, 6.230, 6.247, 6.263, 6.280, 6.296, 6.313, 6.330, 6.347, 6.363, 6.380, 6.397, 6.414, 6.431, 6.448, 6.465, 6.482, 6.499, 6.516, 6.533, 6.551, 6.568, 6.585, 6.603, 6.620, 6.637, 6.655, 6.672, 6.690, 6.707, 6.725, 6.742, 6.760, 6.777, 6.795, 6.813, 6.830, 6.848, 6.866, 6.884, 6.902, 6.919, 6.937, 6.955, 6.973, 6.991, 7.009, 7.027, 7.045, 7.063, 7.081, 7.099, 7.118, 7.136, 7.154, 7.172, 7.190, 7.209, 7.227, 7.245, 7.263, 7.282, 7.300, 7.319, 7.337, 7.355, 7.374, 7.392, 7.411, 7.429, 7.448, 7.466, 7.485, 7.503, 7.522, 7.541, 7.559, 7.578, 7.596, 7.615, 7.634, 7.653, 7.671, 7.690, 7.709, 7.728, 7.746, 7.765, 7.784, 7.803, 7.822, 7.840, 7.859, 7.878, 7.897, 7.916, 7.935, 7.954, 7.973, 7.992, 8.011, 8.030, 8.049, 8.068, 8.087, 8.106, 8.125, 8.144, 8.163, 8.182, 8.201, 8.220, 8.239, 8.259, 8.278, 8.297, 8.316, 8.335, 8.354, 8.374, 8.393, 8.412, 8.431, 8.450, 8.470, 8.489, 8.508, 8.528, 8.547, 8.566, 8.585, 8.605, 8.624, 8.643, 8.663, 8.682, 8.701, 8.721, 8.740, 8.759, 8.779, 8.798, 8.818, 8.837, 8.856, 8.876, 8.895, 8.915, 8.934, 8.954, 8.973, 8.993, 9.012, 9.031, 9.051, 9.070, 9.090, 9.109, 9.129, 9.148, 9.168, 9.188, 9.207, 9.227, 9.246, 9.266, 9.285, 9.305, 9.324, 9.344, 9.364, 9.383, 9.403, 9.422, 9.442, 9.461, 9.481, 9.501, 9.520, 9.540, 9.560, 9.579, 9.599, 9.618, 9.638, 9.658, 9.677, 9.697, 9.717, 9.736, 9.756, 9.776, 9.795, 9.815, 9.835, 9.854, 9.874, 9.894, 9.914, 9.933, 9.953, 9.973, 9.992, 10.012, 10.032, 10.052, 10.071, 10.091, 10.111, 10.131, 10.150, 10.170, 10.190, 10.210, 10.229, 10.249, 10.269, 10.289, 10.308, 10.328, 10.348, 10.368, 10.387, 10.407, 10.427, 10.447, 10.467, 10.486, 10.506, 10.526, 10.546, 10.566, 10.585, 10.605, 10.625, 10.645, 10.665, 10.684, 10.704, 10.724, 10.744, 10.764, 10.784, 10.803, 10.823, 10.843, 10.863, 10.883, 10.903, 10.922, 10.942, 10.962, 10.982, 11.002, 11.022};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        //std::cout << std::format("{:4.3f}, {:4.3f}", time, y) << std::endl;
        ASSERT_NEAR(y, expected[i], 1e-3);
    }

    filter.reset();
}

TEST(TimeVariantControl, LeadLag){
    const double omega1 = 1 * 2 * 3.1415;
    const double omega2 = 10 * 2 * 3.1415;
    controlpp::timevar::LeadLagControl<double> filter(omega1, omega2);

    const double expected[] = {9.468, 8.467, 7.584, 6.806, 6.119, 5.514, 4.980, 4.510, 4.095, 3.729, 3.406, 3.122, 2.871, 2.650, 2.455, 2.283, 2.131, 1.997, 1.879, 1.775, 1.684, 1.603, 1.532, 1.469, 1.413, 1.364, 1.321, 1.283, 1.250, 1.220, 1.194, 1.171, 1.151, 1.133, 1.117, 1.104, 1.091, 1.081, 1.071, 1.063, 1.055, 1.049, 1.043, 1.038, 1.033, 1.029, 1.026, 1.023, 1.020, 1.018, 1.016, 1.014, 1.012, 1.011, 1.009, 1.008, 1.007, 1.007, 1.006, 1.005, 1.004, 1.004, 1.003, 1.003, 1.003, 1.002, 1.002, 1.002, 1.002, 1.001, 1.001, 1.001, 1.001, 1.001, 1.001, 1.001, 1.001, 1.001, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        //std::cout << std::format("{:4.3f}, {:4.3f}", time, y) << std::endl;
        ASSERT_NEAR(y, expected[i], 1e-3);
    }

    filter.reset();
}

TEST(TimeVariantControl, Notch){
    const double omega = 1 * 2 * 3.1415;
    const double D = 0.2;
    const double W = 1;
    controlpp::timevar::NotchControl<double> filter(W, D, omega);

    const double expected[] = {0.990, 0.970, 0.951, 0.933, 0.915, 0.897, 0.880, 0.863, 0.846, 0.831, 0.815, 0.800, 0.785, 0.771, 0.757, 0.744, 0.730, 0.718, 0.705, 0.693, 0.681, 0.670, 0.659, 0.648, 0.638, 0.628, 0.618, 0.609, 0.599, 0.591, 0.582, 0.574, 0.566, 0.558, 0.550, 0.543, 0.536, 0.529, 0.523, 0.517, 0.511, 0.505, 0.499, 0.494, 0.489, 0.484, 0.479, 0.474, 0.470, 0.466, 0.462, 0.458, 0.454, 0.451, 0.448, 0.444, 0.442, 0.439, 0.436, 0.434, 0.431, 0.429, 0.427, 0.425, 0.423, 0.422, 0.420, 0.419, 0.418, 0.417, 0.416, 0.415, 0.414, 0.413, 0.413, 0.412, 0.412, 0.412, 0.411, 0.411, 0.411, 0.412, 0.412, 0.412, 0.412, 0.413, 0.413, 0.414, 0.415, 0.416, 0.416, 0.417, 0.418, 0.419, 0.421, 0.422, 0.423, 0.424, 0.426, 0.427, 0.428, 0.430, 0.432, 0.433, 0.435, 0.437, 0.438, 0.440, 0.442, 0.444, 0.446, 0.448, 0.450, 0.452, 0.454, 0.456, 0.458, 0.460, 0.463, 0.465, 0.467, 0.469, 0.472, 0.474, 0.476, 0.479, 0.481, 0.484, 0.486, 0.488, 0.491, 0.493, 0.496, 0.499, 0.501, 0.504, 0.506, 0.509, 0.511, 0.514, 0.517, 0.519, 0.522, 0.525, 0.527, 0.530, 0.533, 0.535, 0.538, 0.541, 0.543, 0.546, 0.549, 0.552, 0.554, 0.557, 0.560, 0.562, 0.565, 0.568, 0.571, 0.573, 0.576, 0.579, 0.581, 0.584, 0.587, 0.590, 0.592, 0.595, 0.598, 0.600, 0.603, 0.606, 0.608, 0.611, 0.614, 0.616, 0.619, 0.622, 0.624, 0.627, 0.630, 0.632, 0.635, 0.637, 0.640, 0.643, 0.645, 0.648, 0.650, 0.653, 0.655, 0.658, 0.661, 0.663, 0.666, 0.668, 0.671, 0.673, 0.675, 0.678, 0.680, 0.683, 0.685, 0.688, 0.690, 0.692, 0.695, 0.697, 0.700, 0.702, 0.704, 0.707, 0.709, 0.711, 0.713, 0.716, 0.718, 0.720, 0.722, 0.725, 0.727, 0.729, 0.731, 0.733, 0.736, 0.738, 0.740, 0.742, 0.744, 0.746, 0.748, 0.750, 0.752, 0.754, 0.757, 0.759, 0.761, 0.763, 0.765, 0.766, 0.768, 0.770, 0.772, 0.774, 0.776, 0.778, 0.780, 0.782, 0.784, 0.786, 0.787, 0.789, 0.791, 0.793, 0.795, 0.796, 0.798, 0.800, 0.802, 0.803, 0.805, 0.807, 0.808, 0.810, 0.812, 0.813, 0.815, 0.817, 0.818, 0.820, 0.822, 0.823, 0.825, 0.826, 0.828, 0.829, 0.831, 0.832, 0.834, 0.835, 0.837, 0.838, 0.840, 0.841, 0.843, 0.844, 0.845, 0.847, 0.848, 0.850, 0.851, 0.852, 0.854, 0.855, 0.856, 0.858, 0.859, 0.860, 0.862, 0.863, 0.864, 0.865, 0.867, 0.868, 0.869, 0.870, 0.871, 0.873, 0.874, 0.875, 0.876, 0.877, 0.878, 0.880, 0.881, 0.882, 0.883, 0.884, 0.885, 0.886, 0.887, 0.888, 0.889, 0.890, 0.892, 0.893, 0.894, 0.895, 0.896, 0.897, 0.898, 0.899, 0.899, 0.900, 0.901, 0.902, 0.903, 0.904, 0.905, 0.906, 0.907, 0.908, 0.909, 0.910, 0.910, 0.911, 0.912, 0.913, 0.914, 0.915, 0.916, 0.916, 0.917, 0.918, 0.919, 0.920, 0.920, 0.921, 0.922, 0.923, 0.923, 0.924, 0.925, 0.926, 0.926, 0.927, 0.928, 0.928, 0.929, 0.930, 0.931, 0.931, 0.932, 0.933, 0.933, 0.934, 0.935, 0.935, 0.936, 0.936, 0.937, 0.938, 0.938, 0.939, 0.940, 0.940, 0.941, 0.941, 0.942, 0.943, 0.943, 0.944, 0.944, 0.945, 0.945, 0.946, 0.946, 0.947, 0.947, 0.948, 0.949, 0.949, 0.950, 0.950, 0.951, 0.951, 0.952, 0.952, 0.953, 0.953, 0.953, 0.954, 0.954, 0.955, 0.955, 0.956, 0.956, 0.957, 0.957, 0.958, 0.958, 0.958, 0.959, 0.959, 0.960, 0.960, 0.960, 0.961, 0.961, 0.962, 0.962, 0.962, 0.963, 0.963, 0.964, 0.964, 0.964, 0.965, 0.965, 0.965, 0.966, 0.966, 0.966, 0.967, 0.967, 0.967, 0.968, 0.968, 0.968, 0.969, 0.969, 0.969, 0.970, 0.970, 0.970, 0.971, 0.971, 0.971, 0.972, 0.972, 0.972, 0.972, 0.973, 0.973, 0.973, 0.974, 0.974, 0.974, 0.974, 0.975, 0.975, 0.975, 0.975, 0.976, 0.976, 0.976, 0.976, 0.977, 0.977, 0.977, 0.977, 0.978, 0.978, 0.978, 0.978, 0.979, 0.979, 0.979, 0.979, 0.979, 0.980, 0.980, 0.980, 0.980, 0.981, 0.981, 0.981, 0.981, 0.981};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        //std::cout << std::format("{:4.3f}, {:4.3f}", time, y) << std::endl;
        ASSERT_NEAR(y, expected[i], 1e-3);
    }

    filter.reset();
}