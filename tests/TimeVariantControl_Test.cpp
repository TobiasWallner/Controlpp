// std
#include <iostream>
#include <format>

// google test
#include <gtest/gtest.h>

// controlpp
#include <controlpp/TimeVariantControl.hpp>

TEST(TimeVariantControl, I){
    const double ki = 0.5;
    controlpp::timevar::I<double> filter(ki);

    const double expected[] = {0.000, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.010, 0.011, 0.012, 0.013, 0.014, 0.015, 0.016, 0.017, 0.018, 0.019, 0.020, 0.021, 0.022, 0.023, 0.024, 0.025, 0.026, 0.027, 0.028, 0.029, 0.030, 0.031, 0.032, 0.033, 0.034, 0.035, 0.036, 0.037, 0.038, 0.039, 0.040, 0.041, 0.042, 0.043, 0.044, 0.045, 0.046, 0.047, 0.048, 0.049, 0.050, 0.051, 0.052, 0.053, 0.054, 0.055, 0.056, 0.057, 0.058, 0.059, 0.060, 0.061, 0.062, 0.064, 0.065, 0.066, 0.067, 0.068, 0.069, 0.070, 0.071, 0.072, 0.073, 0.074, 0.075, 0.076, 0.077, 0.078, 0.079, 0.080, 0.081, 0.082, 0.083, 0.084, 0.085, 0.086, 0.087, 0.088, 0.089, 0.090, 0.091, 0.092, 0.093, 0.094, 0.095, 0.096, 0.097, 0.098, 0.099, 0.100, 0.101, 0.102, 0.103, 0.104, 0.105, 0.106, 0.107, 0.108, 0.109, 0.110, 0.111, 0.112, 0.113, 0.114, 0.115, 0.116, 0.117, 0.118, 0.119, 0.120, 0.121, 0.122, 0.123, 0.124, 0.125, 0.126, 0.127, 0.128, 0.129, 0.130, 0.131, 0.132, 0.133, 0.134, 0.135, 0.136, 0.137, 0.138, 0.139, 0.140, 0.141, 0.142, 0.143, 0.144, 0.145, 0.146, 0.147, 0.148, 0.149, 0.150, 0.151, 0.152, 0.153, 0.154, 0.155, 0.156, 0.157, 0.158, 0.159, 0.160, 0.161, 0.162, 0.163, 0.164, 0.165, 0.166, 0.167, 0.168, 0.169, 0.170, 0.171, 0.172, 0.173, 0.174, 0.175, 0.176, 0.177, 0.178, 0.179, 0.180, 0.181, 0.182, 0.183, 0.184, 0.185, 0.186, 0.187, 0.188, 0.189, 0.190, 0.191, 0.192, 0.193, 0.194, 0.195, 0.196, 0.197, 0.198, 0.199, 0.200, 0.201, 0.202, 0.203, 0.204, 0.205, 0.206, 0.207, 0.208, 0.209, 0.210, 0.211, 0.212, 0.213, 0.214, 0.215, 0.216, 0.217, 0.218, 0.219, 0.220, 0.221, 0.222, 0.223, 0.224, 0.225, 0.226, 0.227, 0.228, 0.229, 0.230, 0.231, 0.232, 0.233, 0.234, 0.235, 0.236, 0.237, 0.238, 0.239, 0.240, 0.241, 0.242, 0.243, 0.244, 0.245, 0.246, 0.247, 0.248, 0.249, 0.250, 0.251, 0.252, 0.253, 0.254, 0.255, 0.256, 0.257, 0.258, 0.259, 0.260, 0.261, 0.262, 0.263, 0.264, 0.265, 0.266, 0.267, 0.268, 0.269, 0.270, 0.271, 0.272, 0.273, 0.274, 0.275, 0.276, 0.277, 0.278, 0.279, 0.280, 0.281, 0.282, 0.283, 0.284, 0.285, 0.286, 0.287, 0.288, 0.289, 0.290, 0.291, 0.292, 0.293, 0.294, 0.295, 0.296, 0.297, 0.298, 0.299, 0.300, 0.301, 0.302, 0.303, 0.304, 0.305, 0.306, 0.307, 0.308, 0.309, 0.310, 0.311, 0.312, 0.313, 0.314, 0.315, 0.316, 0.317, 0.318, 0.319, 0.320, 0.321, 0.322, 0.323, 0.324, 0.325, 0.326, 0.327, 0.328, 0.329, 0.330, 0.331, 0.332, 0.333, 0.334, 0.335, 0.336, 0.337, 0.338, 0.339, 0.340, 0.341, 0.342, 0.343, 0.344, 0.345, 0.346, 0.347, 0.348, 0.349, 0.350, 0.351, 0.352, 0.353, 0.354, 0.355, 0.356, 0.357, 0.358, 0.359, 0.360, 0.361, 0.362, 0.363, 0.364, 0.365, 0.366, 0.367, 0.368, 0.369, 0.370, 0.371, 0.372, 0.373, 0.374, 0.375, 0.376, 0.377, 0.378, 0.379, 0.380, 0.381, 0.382, 0.383, 0.384, 0.385, 0.386, 0.387, 0.388, 0.389, 0.390, 0.391, 0.392, 0.393, 0.394, 0.395, 0.396, 0.397, 0.398, 0.399, 0.400, 0.401, 0.402, 0.403, 0.404, 0.405, 0.406, 0.407, 0.408, 0.409, 0.410, 0.411, 0.412, 0.413, 0.414, 0.415, 0.416, 0.417, 0.418, 0.419, 0.420, 0.421, 0.422, 0.423, 0.424, 0.425, 0.426, 0.427, 0.428, 0.429, 0.430, 0.431, 0.432, 0.433, 0.434, 0.435, 0.436, 0.437, 0.438, 0.439, 0.440, 0.441, 0.442, 0.443, 0.444, 0.445, 0.446, 0.447, 0.448, 0.449, 0.450, 0.451, 0.452, 0.453, 0.454, 0.455, 0.456, 0.457, 0.458, 0.459, 0.460, 0.461, 0.462, 0.463, 0.464, 0.465, 0.466, 0.467, 0.468, 0.469, 0.470, 0.471, 0.472, 0.473, 0.474, 0.475, 0.476, 0.477, 0.478, 0.479, 0.480, 0.481, 0.482, 0.483, 0.484, 0.485, 0.486, 0.487, 0.488, 0.489, 0.490, 0.491, 0.492, 0.493, 0.494, 0.495, 0.496, 0.497, 0.498, 0.499, 0.500, 0.501};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        ASSERT_NEAR(y, expected[i], 1e-3);
    }
}

TEST(TimeVariantControl, D){
    const double kd = 6;
    const double omega = 10 * 2 * 3.1415;
    controlpp::timevar::D<double> filter(kd, omega);

    const double expected[] = {354.695, 312.758, 275.781, 243.175, 214.424, 189.072, 166.718, 147.006, 129.626, 114.300, 100.786, 88.870, 78.363, 69.098, 60.928, 53.725, 47.373, 41.772, 36.833, 32.478, 28.638, 25.252, 22.267, 19.634, 17.313, 15.266, 13.461, 11.869, 10.466, 9.229, 8.138, 7.175, 6.327, 5.579, 4.919, 4.338, 3.825, 3.373, 2.974, 2.622, 2.312, 2.039, 1.798, 1.585, 1.398, 1.233, 1.087, 0.958, 0.845, 0.745, 0.657, 0.579, 0.511, 0.450, 0.397, 0.350, 0.309, 0.272, 0.240, 0.212, 0.187, 0.165, 0.145, 0.128, 0.113, 0.100, 0.088, 0.077, 0.068, 0.060, 0.053, 0.047, 0.041, 0.036, 0.032, 0.028, 0.025, 0.022, 0.019, 0.017, 0.015, 0.013, 0.012, 0.010, 0.009, 0.008, 0.007, 0.006, 0.006, 0.005, 0.004, 0.004, 0.003, 0.003, 0.003, 0.002, 0.002, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        ASSERT_NEAR(y, expected[i], 1e-3);
    }
}

TEST(TimeVariantControl, PI){
    const double kp = 1.7;
    const double ki = 3.1;
    controlpp::timevar::PI<double> filter(kp, ki);

    const double expected[] = {1.703, 1.709, 1.716, 1.722, 1.728, 1.734, 1.740, 1.746, 1.753, 1.759, 1.765, 1.771, 1.777, 1.784, 1.790, 1.796, 1.802, 1.808, 1.815, 1.821, 1.827, 1.833, 1.839, 1.846, 1.852, 1.858, 1.864, 1.870, 1.877, 1.883, 1.889, 1.895, 1.901, 1.908, 1.914, 1.920, 1.926, 1.932, 1.939, 1.945, 1.951, 1.957, 1.963, 1.970, 1.976, 1.982, 1.988, 1.994, 2.001, 2.007, 2.013, 2.019, 2.025, 2.032, 2.038, 2.044, 2.050, 2.056, 2.063, 2.069, 2.075, 2.081, 2.087, 2.094, 2.100, 2.106, 2.112, 2.118, 2.125, 2.131, 2.137, 2.143, 2.149, 2.156, 2.162, 2.168, 2.174, 2.180, 2.187, 2.193, 2.199, 2.205, 2.211, 2.218, 2.224, 2.230, 2.236, 2.242, 2.249, 2.255, 2.261, 2.267, 2.273, 2.280, 2.286, 2.292, 2.298, 2.304, 2.311, 2.317, 2.323, 2.329, 2.335, 2.342, 2.348, 2.354, 2.360, 2.366, 2.373, 2.379, 2.385, 2.391, 2.397, 2.404, 2.410, 2.416, 2.422, 2.428, 2.435, 2.441, 2.447, 2.453, 2.459, 2.466, 2.472, 2.478, 2.484, 2.490, 2.497, 2.503, 2.509, 2.515, 2.521, 2.528, 2.534, 2.540, 2.546, 2.552, 2.559, 2.565, 2.571, 2.577, 2.583, 2.590, 2.596, 2.602, 2.608, 2.614, 2.621, 2.627, 2.633, 2.639, 2.645, 2.652, 2.658, 2.664, 2.670, 2.676, 2.683, 2.689, 2.695, 2.701, 2.707, 2.714, 2.720, 2.726, 2.732, 2.738, 2.745, 2.751, 2.757, 2.763, 2.769, 2.776, 2.782, 2.788, 2.794, 2.800, 2.807, 2.813, 2.819, 2.825, 2.831, 2.838, 2.844, 2.850, 2.856, 2.862, 2.869, 2.875, 2.881, 2.887, 2.893, 2.900, 2.906, 2.912, 2.918, 2.924, 2.931, 2.937, 2.943, 2.949, 2.955, 2.962, 2.968, 2.974, 2.980, 2.986, 2.993, 2.999, 3.005, 3.011, 3.017, 3.024, 3.030, 3.036, 3.042, 3.048, 3.055, 3.061, 3.067, 3.073, 3.079, 3.086, 3.092, 3.098, 3.104, 3.110, 3.117, 3.123, 3.129, 3.135, 3.141, 3.148, 3.154, 3.160, 3.166, 3.172, 3.179, 3.185, 3.191, 3.197, 3.203, 3.210, 3.216, 3.222, 3.228, 3.234, 3.241, 3.247, 3.253, 3.259, 3.265, 3.272, 3.278, 3.284, 3.290, 3.296, 3.303, 3.309, 3.315, 3.321, 3.327, 3.334, 3.340, 3.346, 3.352, 3.358, 3.365, 3.371, 3.377, 3.383, 3.389, 3.396, 3.402, 3.408, 3.414, 3.420, 3.427, 3.433, 3.439, 3.445, 3.451, 3.458, 3.464, 3.470, 3.476, 3.482, 3.489, 3.495, 3.501, 3.507, 3.513, 3.520, 3.526, 3.532, 3.538, 3.544, 3.551, 3.557, 3.563, 3.569, 3.575, 3.582, 3.588, 3.594, 3.600, 3.606, 3.613, 3.619, 3.625, 3.631, 3.637, 3.644, 3.650, 3.656, 3.662, 3.668, 3.675, 3.681, 3.687, 3.693, 3.699, 3.706, 3.712, 3.718, 3.724, 3.730, 3.737, 3.743, 3.749, 3.755, 3.761, 3.768, 3.774, 3.780, 3.786, 3.792, 3.799, 3.805, 3.811, 3.817, 3.823, 3.830, 3.836, 3.842, 3.848, 3.854, 3.861, 3.867, 3.873, 3.879, 3.885, 3.892, 3.898, 3.904, 3.910, 3.916, 3.923, 3.929, 3.935, 3.941, 3.947, 3.954, 3.960, 3.966, 3.972, 3.978, 3.985, 3.991, 3.997, 4.003, 4.009, 4.016, 4.022, 4.028, 4.034, 4.040, 4.047, 4.053, 4.059, 4.065, 4.071, 4.078, 4.084, 4.090, 4.096, 4.102, 4.109, 4.115, 4.121, 4.127, 4.133, 4.140, 4.146, 4.152, 4.158, 4.164, 4.171, 4.177, 4.183, 4.189, 4.195, 4.202, 4.208, 4.214, 4.220, 4.226, 4.233, 4.239, 4.245, 4.251, 4.257, 4.264, 4.270, 4.276, 4.282, 4.288, 4.295, 4.301, 4.307, 4.313, 4.319, 4.326, 4.332, 4.338, 4.344, 4.350, 4.357, 4.363, 4.369, 4.375, 4.381, 4.388, 4.394, 4.400, 4.406, 4.412, 4.419, 4.425, 4.431, 4.437, 4.443, 4.450, 4.456, 4.462, 4.468, 4.474, 4.481, 4.487, 4.493, 4.499, 4.505, 4.512, 4.518, 4.524, 4.530, 4.536, 4.543, 4.549, 4.555, 4.561, 4.567, 4.574, 4.580, 4.586, 4.592, 4.598, 4.605, 4.611, 4.617, 4.623, 4.629, 4.636, 4.642, 4.648, 4.654, 4.660, 4.667, 4.673, 4.679, 4.685, 4.691, 4.698, 4.704, 4.710, 4.716, 4.722, 4.729, 4.735, 4.741, 4.747, 4.753, 4.760, 4.766, 4.772, 4.778, 4.784, 4.791, 4.797, 4.803};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        ASSERT_NEAR(y, expected[i], 1e-3);
    }
}

TEST(TimeVariantControl, ThamedPI){
    const double kp = 1.7;
    const double ki = 3.1;
    const double omega = 30 * 2 * 3.1415;
    controlpp::timevar::ThamedPI<double> filter(kp, ki, omega);

    const double expected[] = {0.270, 0.726, 1.039, 1.254, 1.404, 1.507, 1.580, 1.632, 1.669, 1.697, 1.717, 1.734, 1.747, 1.757, 1.767, 1.775, 1.783, 1.790, 1.797, 1.803, 1.810, 1.816, 1.823, 1.829, 1.835, 1.842, 1.848, 1.854, 1.860, 1.866, 1.873, 1.879, 1.885, 1.891, 1.897, 1.904, 1.910, 1.916, 1.922, 1.928, 1.935, 1.941, 1.947, 1.953, 1.959, 1.966, 1.972, 1.978, 1.984, 1.990, 1.997, 2.003, 2.009, 2.015, 2.021, 2.028, 2.034, 2.040, 2.046, 2.052, 2.059, 2.065, 2.071, 2.077, 2.083, 2.090, 2.096, 2.102, 2.108, 2.114, 2.121, 2.127, 2.133, 2.139, 2.145, 2.152, 2.158, 2.164, 2.170, 2.176, 2.183, 2.189, 2.195, 2.201, 2.207, 2.214, 2.220, 2.226, 2.232, 2.238, 2.245, 2.251, 2.257, 2.263, 2.269, 2.276, 2.282, 2.288, 2.294, 2.300, 2.307, 2.313, 2.319, 2.325, 2.331, 2.338, 2.344, 2.350, 2.356, 2.362, 2.369, 2.375, 2.381, 2.387, 2.393, 2.400, 2.406, 2.412, 2.418, 2.424, 2.431, 2.437, 2.443, 2.449, 2.455, 2.462, 2.468, 2.474, 2.480, 2.486, 2.493, 2.499, 2.505, 2.511, 2.517, 2.524, 2.530, 2.536, 2.542, 2.548, 2.555, 2.561, 2.567, 2.573, 2.579, 2.586, 2.592, 2.598, 2.604, 2.610, 2.617, 2.623, 2.629, 2.635, 2.641, 2.648, 2.654, 2.660, 2.666, 2.672, 2.679, 2.685, 2.691, 2.697, 2.703, 2.710, 2.716, 2.722, 2.728, 2.734, 2.741, 2.747, 2.753, 2.759, 2.765, 2.772, 2.778, 2.784, 2.790, 2.796, 2.803, 2.809, 2.815, 2.821, 2.827, 2.834, 2.840, 2.846, 2.852, 2.858, 2.865, 2.871, 2.877, 2.883, 2.889, 2.896, 2.902, 2.908, 2.914, 2.920, 2.927, 2.933, 2.939, 2.945, 2.951, 2.958, 2.964, 2.970, 2.976, 2.982, 2.989, 2.995, 3.001, 3.007, 3.013, 3.020, 3.026, 3.032, 3.038, 3.044, 3.051, 3.057, 3.063, 3.069, 3.075, 3.082, 3.088, 3.094, 3.100, 3.106, 3.113, 3.119, 3.125, 3.131, 3.137, 3.144, 3.150, 3.156, 3.162, 3.168, 3.175, 3.181, 3.187, 3.193, 3.199, 3.206, 3.212, 3.218, 3.224, 3.230, 3.237, 3.243, 3.249, 3.255, 3.261, 3.268, 3.274, 3.280, 3.286, 3.292, 3.299, 3.305, 3.311, 3.317, 3.323, 3.330, 3.336, 3.342, 3.348, 3.354, 3.361, 3.367, 3.373, 3.379, 3.385, 3.392, 3.398, 3.404, 3.410, 3.416, 3.423, 3.429, 3.435, 3.441, 3.447, 3.454, 3.460, 3.466, 3.472, 3.478, 3.485, 3.491, 3.497, 3.503, 3.509, 3.516, 3.522, 3.528, 3.534, 3.540, 3.547, 3.553, 3.559, 3.565, 3.571, 3.578, 3.584, 3.590, 3.596, 3.602, 3.609, 3.615, 3.621, 3.627, 3.633, 3.640, 3.646, 3.652, 3.658, 3.664, 3.671, 3.677, 3.683, 3.689, 3.695, 3.702, 3.708, 3.714, 3.720, 3.726, 3.733, 3.739, 3.745, 3.751, 3.757, 3.764, 3.770, 3.776, 3.782, 3.788, 3.795, 3.801, 3.807, 3.813, 3.819, 3.826, 3.832, 3.838, 3.844, 3.850, 3.857, 3.863, 3.869, 3.875, 3.881, 3.888, 3.894, 3.900, 3.906, 3.912, 3.919, 3.925, 3.931, 3.937, 3.943, 3.950, 3.956, 3.962, 3.968, 3.974, 3.981, 3.987, 3.993, 3.999, 4.005, 4.012, 4.018, 4.024, 4.030, 4.036, 4.043, 4.049, 4.055, 4.061, 4.067, 4.074, 4.080, 4.086, 4.092, 4.098, 4.105, 4.111, 4.117, 4.123, 4.129, 4.136, 4.142, 4.148, 4.154, 4.160, 4.167, 4.173, 4.179, 4.185, 4.191, 4.198, 4.204, 4.210, 4.216, 4.222, 4.229, 4.235, 4.241, 4.247, 4.253, 4.260, 4.266, 4.272, 4.278, 4.284, 4.291, 4.297, 4.303, 4.309, 4.315, 4.322, 4.328, 4.334, 4.340, 4.346, 4.353, 4.359, 4.365, 4.371, 4.377, 4.384, 4.390, 4.396, 4.402, 4.408, 4.415, 4.421, 4.427, 4.433, 4.439, 4.446, 4.452, 4.458, 4.464, 4.470, 4.477, 4.483, 4.489, 4.495, 4.501, 4.508, 4.514, 4.520, 4.526, 4.532, 4.539, 4.545, 4.551, 4.557, 4.563, 4.570, 4.576, 4.582, 4.588, 4.594, 4.601, 4.607, 4.613, 4.619, 4.625, 4.632, 4.638, 4.644, 4.650, 4.656, 4.663, 4.669, 4.675, 4.681, 4.687, 4.694, 4.700, 4.706, 4.712, 4.718, 4.725, 4.731, 4.737, 4.743, 4.749, 4.756, 4.762, 4.768, 4.774, 4.780, 4.787};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        ASSERT_NEAR(y, expected[i], 1e-3);
    }
}

TEST(TimeVariantControl, PT1){
    const double k = 2.3;
    const double omega = 5 * 2 * 3.1415;
    controlpp::timevar::PT1<double> filter(k, omega);

    const double expected[] = {0.070, 0.206, 0.333, 0.453, 0.566, 0.671, 0.771, 0.864, 0.951, 1.033, 1.111, 1.183, 1.251, 1.315, 1.375, 1.431, 1.484, 1.534, 1.581, 1.624, 1.666, 1.704, 1.741, 1.775, 1.807, 1.837, 1.865, 1.891, 1.916, 1.940, 1.962, 1.982, 2.002, 2.020, 2.037, 2.053, 2.068, 2.082, 2.095, 2.108, 2.120, 2.130, 2.141, 2.151, 2.160, 2.168, 2.176, 2.184, 2.191, 2.197, 2.204, 2.210, 2.215, 2.220, 2.225, 2.230, 2.234, 2.238, 2.242, 2.245, 2.249, 2.252, 2.255, 2.257, 2.260, 2.262, 2.265, 2.267, 2.269, 2.271, 2.273, 2.274, 2.276, 2.277, 2.279, 2.280, 2.281, 2.282, 2.283, 2.284, 2.285, 2.286, 2.287, 2.288, 2.289, 2.289, 2.290, 2.291, 2.291, 2.292, 2.292, 2.293, 2.293, 2.294, 2.294, 2.294, 2.295, 2.295, 2.295, 2.296, 2.296, 2.296, 2.296, 2.297, 2.297, 2.297, 2.297, 2.297, 2.297, 2.298, 2.298, 2.298, 2.298, 2.298, 2.298, 2.298, 2.298, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.299, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300, 2.300};

    const double Ts = 2e-3;
    size_t i = 0; 
    for(double time = 0; time < 1; time += Ts, (void)++i){
        const double y = filter.input(1.0, Ts);
        //std::cout << std::format("{:4.3f}, {:4.3f}", time, y) << std::endl;
        ASSERT_NEAR(y, expected[i], 1e-3);
    }
}